import torch
import torch.nn as nn
import random
from collections import deque



class DQN(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(state_dim, 128)
        self.fc2 = nn.Linear(128, 128)
        self.fc3 = nn.Linear(128, action_dim)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

class DQNAgent:
    def __init__(self, state_dim, action_dim, lr=1e-4, gamma=0.99, epsilon=1.0,
                 epsilon_decay=0.995, epsilon_min=0.01, batch_size=64):
        self.state_dim = state_dim
        self.action_dim = action_dim
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.lr = lr
        self.gamma = gamma
        self.epsilon = epsilon
        self.epsilon_decay = epsilon_decay
        self.epsilon_min = epsilon_min
        self.batch_size = batch_size
        self.memory = deque(maxlen=10000)
        self.model = DQN(state_dim, action_dim).to(self.device)
        self.optimizer = torch.optim.Adam(self.model.parameters(), lr=lr)
        self.loss = nn.MSELoss()

    def store_transition(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        state = torch.FloatTensor(state).to(self.device)
        if len(state.shape) == 1:
            state = state.unsqueeze(0)  # Add batch dimension if not already present
        if torch.rand(1).item() <= self.epsilon:
            return random.randrange(self.action_dim)
        with torch.no_grad():
            action_values = self.model(state)
            return torch.argmax(action_values, dim=1).item()

    def replay(self):
        if len(self.memory) < self.batch_size:
            return

        # Sample a batch of experiences from memory
        minibatch = random.sample(self.memory, self.batch_size)
        states, actions, rewards, next_states, dones = zip(*minibatch)

        # Stack the states, next_states, rewards, etc. into tensors
        states = torch.stack([torch.FloatTensor(state) for state in states]).to(self.device)
        next_states = torch.stack([torch.FloatTensor(next_state) for next_state in next_states]).to(self.device)
        actions = torch.tensor(actions).to(self.device).unsqueeze(1)
        rewards = torch.tensor(rewards).to(self.device).unsqueeze(1)
        dones = torch.tensor(dones).to(self.device).unsqueeze(1)

        # Compute Q(s, a) using the current state and action
        q_values = self.model(states).gather(1, actions)

        # Compute Q(s', a) for next state
        with torch.no_grad():
            max_next_q_values = self.model(next_states).max(1, keepdim=True)[0]
            target_q_values = rewards + (self.gamma * max_next_q_values * (1 - dones))

        # Compute loss
        loss = self.loss(q_values, target_q_values)

        # Perform gradient descent
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay

    def save(self, filename):
        torch.save(self.model.state_dict(), filename)



