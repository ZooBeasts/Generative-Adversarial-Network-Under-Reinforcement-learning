
import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.nn import GATConv, global_mean_pool
import torch
from torch_geometric.data import Data


class OpticalStackGNN(nn.Module):
    def __init__(self, node_in_channels, hidden_channels, out_channels, heads=1):
        super(OpticalStackGNN, self).__init__()
        self.layer1 = GATConv(node_in_channels, hidden_channels, heads=heads, concat=True)
        self.layer2 = GATConv(hidden_channels * heads, hidden_channels, heads=heads, concat=True)
        self.layer3 = GATConv(hidden_channels * heads, hidden_channels, heads=heads, concat=True)
        self.layer4 = GATConv(hidden_channels * heads, hidden_channels, heads=heads, concat=True)
        self.out = nn.Linear(hidden_channels * heads, out_channels)

    def forward(self, x, edge_index, batch):
        x = F.relu(self.layer1(x, edge_index))
        x = F.relu(self.layer2(x, edge_index))
        x = F.relu(self.layer3(x, edge_index))
        x = F.relu(self.layer4(x, edge_index))
        x = global_mean_pool(x, batch)
        x = self.out(x)
        return x
